@page "/"
@using BitMiracle.Docotic.Pdf
@inject Microsoft.JSInterop.IJSRuntime JS
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>

<button class="btn btn-primary" @onclick="@GeneratePdf">Generate PDF</button>

@functions {

    async void GeneratePdf()
    {
        await Task.Delay(50);
        NavigationManager.NavigateTo("/pdfviewer");
        // NOTE:
        // When used in trial mode, the library imposes some restrictions.
        // Please visit https://bitmiracle.com/pdf-library/trial-restrictions
        // for more information.

        string uid = Guid.NewGuid().ToString();

        // using (var pdf = new PdfDocument())
        // {
        //     PdfCanvas canvas = pdf.Pages[0].Canvas;

        //     PdfFont builtInFont = pdf.AddFont(PdfBuiltInFont.TimesRoman);
        //     canvas.Font = builtInFont;
        //     canvas.DrawString(10, 70, "Hello, world! " + uid);

        //     using (var memoryStream = new MemoryStream())
        //     {
        //         pdf.Save(memoryStream);

        //         JS.InvokeAsync<object>(
        //            "downloadFile",
        //            uid + ".pdf",
        //            Convert.ToBase64String(memoryStream.ToArray())
        //         );
        //     };
        // }

        using (var pdf = new PdfDocument())
        {
            PdfDrawOptions options = PdfDrawOptions.Create();
            options.BackgroundColor = new PdfRgbColor(255, 255, 255);
            options.HorizontalResolution = 100;
            options.VerticalResolution = 100;



            // for (int i = 0; i < pdf.PageCount; ++i)
            //     pdf.Pages[i].Save($"page_{i}.png", options);
            pdf.Pages[0].Save("tiled.png", options);
            using (var memoryStream = new MemoryStream())
            {
                // pdf.Save(memoryStream);

                // Save the page as an image to the memory stream
                pdf.Pages[0].Save(memoryStream, options);

                // Convert the image bytes to Base64
                var base64String = Convert.ToBase64String(memoryStream.ToArray());

                // Pass the Base64 string to JavaScript
                await JS.InvokeAsync<object>(
                   "renderImage",
                   base64String
               );


                //  JS.InvokeAsync<object>(
                // "renderImage",
                //     uid + ".png",
                //     Convert.ToBase64String(memoryStream.ToArray())
                //  );
            };
        }

        // using (var pdf = new PdfDocument("your_document.pdf"))
        // {
        //     PdfDrawOptions options = PdfDrawOptions.Create();
        //     options.BackgroundColor = new PdfRgbColor(255, 255, 255);
        //     options.HorizontalResolution = 300;
        //     options.VerticalResolution = 300;

        //     for (int i = 0; i < pdf.PageCount; ++i)
        //         pdf.Pages[i].Save($"page_{i}.png", options);
        // }
    }
}